# CHERI DEFAULT PROTECTION SPACIAL-TEMPORAL EXPLOIT



The main idea behind this exploit is that if CHERI protects against out of bounds and usage in read or write of invalid pointers, it does not protect against out of bounds inside a structure and it allows invalid pointers to access their address value, which can be used to calculate an offset. If the offset is used without more control after an overflow modifying its value, it can allow an attacker to perturb the normal execution behavior of a program.

In order to run the exploit, do this:
- Compile exploit.c: on a normal machine gcc -o exploit exploit. On a CHERI environment, use: cc -o exploit exploit.c (to compile with default protections)

- Install python3 if not already installed (apt install python3, or pkg64 install python3)
- Run: python3 BOF.py

This will output a lot of things. To understand what happens, please take a look at exploit.c (first) and then BOF.py
It will initialize a first structure to get the address of the target function and then exit. It will then print it, in its default format then using little endian format. Using the address (which will not change because CHERI does not implement address randomization) it will craft an inject file which will be used as input for the program.

We suppose the attacker is responsible for the input after call of function f3. Inject file is not entirely attacker input. We first have to initialize the data that will be targeted.

We use a python script to manage binary input easily (it is possible to do without, it is just more complex for the user). 

The objective of the exploit is to call the secret function which allows the user to change the password value inside the object, then print private information to prove the password was modified.
